name: Run Lint

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['**']

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']   # 保持和 pyproject 的 >=3.10,<3.11 一致

    steps:
      - name: Checkout code
        uses: actions/checkout@v4   # ← 升到 v4（原来 v3 也可）

      - name: Set up Python 3.10
        uses: actions/setup-python@v5   # ← 升到 v5 更新
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev python3-pyaudio

      - name: Install Poetry
        id: install-poetry                 # ← 加 id，方便取输出路径
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3                   # ← 改成 1.8.3，更稳
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer: pipx                  # ← 明确用 pipx 安装

      - name: Put Poetry on PATH
        run: echo "${{ steps.install-poetry.outputs.poetry-path }}" >> $GITHUB_PATH
        # ↑↑ 关键：把 poetry 可执行文件所在目录加入 PATH，跨步可见

      - name: Check Poetry
        run: poetry --version              # ← 确认能找到 poetry

      - name: Force Poetry to use runner Python
        run: poetry env use "$(which python)"   # ← 绑定到刚装的 3.10

      - name: Install dependencies
        run: poetry install --no-interaction --with dev

      - name: Run Ruff
        run: poetry run ruff check .

      - name: Run Black
        run: poetry run black --check .

      - name: Run isort
        run: poetry run isort --check-only .
